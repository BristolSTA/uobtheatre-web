/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

const documents = {
    "fragment AddressFields on AddressNode {\n  id\n  buildingNumber\n  buildingName\n  street\n  city\n  postcode\n  latitude\n  longitude\n}": types.AddressFieldsFragmentDoc,
    "fragment AllPriceBreakdown on PriceBreakdownNode {\n  tickets {\n    number\n    seatGroup {\n      id\n      name\n    }\n    concessionType {\n      id\n      name\n    }\n    totalPrice\n  }\n  miscCosts {\n    name\n    description\n    percentage\n    value\n  }\n  ticketsPrice\n  ticketsDiscountedPrice\n  discountsValue\n  subtotalPrice\n  miscCostsValue\n  totalPrice\n}": types.AllPriceBreakdownFragmentDoc,
    "fragment BasicBookingDetails on BookingNode {\n  id\n  reference\n  status\n  user {\n    id\n    firstName\n    lastName\n  }\n  performance {\n    id\n    start\n    end\n    production {\n      id\n      name\n      slug\n    }\n  }\n  tickets {\n    id\n  }\n}": types.BasicBookingDetailsFragmentDoc,
    "fragment BookingPaymentDetails on BookingNode {\n  transactions {\n    edges {\n      node {\n        id\n        createdAt\n        type\n        providerName\n        providerTransactionId\n        providerFee\n        value\n        cardBrand\n        last4\n      }\n    }\n  }\n}": types.BookingPaymentDetailsFragmentDoc,
    "fragment BookingTicketDetails on BookingNode {\n  tickets {\n    id\n    seatGroup {\n      id\n      name\n    }\n    concessionType {\n      id\n      name\n    }\n    checkedIn\n  }\n}": types.BookingTicketDetailsFragmentDoc,
    "fragment BookingWithProductionDetails on BookingNode {\n  id\n  reference\n  status\n  priceBreakdown {\n    ...AllPriceBreakdown\n  }\n  tickets {\n    id\n    seatGroup {\n      id\n      name\n    }\n    concessionType {\n      id\n      name\n    }\n  }\n  performance {\n    id\n    production {\n      id\n      name\n      slug\n      subtitle\n      society {\n        id\n        name\n        slug\n        logo {\n          id\n          url\n        }\n      }\n      featuredImage {\n        id\n        url\n      }\n    }\n    start\n    end\n    doorsOpen\n    durationMins\n    intervalDurationMins\n    venue {\n      id\n      slug\n    }\n  }\n  transactions {\n    edges {\n      node {\n        id\n        createdAt\n        type\n        providerName\n        providerTransactionId\n        providerFee\n        value\n        cardBrand\n        last4\n      }\n    }\n  }\n}": types.BookingWithProductionDetailsFragmentDoc,
    "fragment DetailedBookingDetails on BookingNode {\n  id\n  reference\n  expired\n  expiresAt\n  status\n  user {\n    id\n    firstName\n    lastName\n  }\n  salesBreakdown {\n    totalPayments\n  }\n  priceBreakdown {\n    ...AllPriceBreakdown\n  }\n  ...BookingTicketDetails\n  ...BookingPaymentDetails\n  performance {\n    id\n    production {\n      id\n      name\n      slug\n    }\n    start\n    end\n    doorsOpen\n    venue {\n      id\n      slug\n    }\n    durationMins\n    intervalDurationMins\n  }\n}": types.DetailedBookingDetailsFragmentDoc,
    "fragment PerformanceTicketOptionsFragment on PerformanceSeatGroupNode {\n  id\n  capacityRemaining\n  price\n  seatGroup {\n    id\n    name\n    description\n    capacity\n  }\n  concessionTypes {\n    concessionType {\n      id\n      name\n      description\n    }\n    price\n  }\n}": types.PerformanceTicketOptionsFragmentFragmentDoc,
    "fragment ProductionBasicInfo on ProductionNode {\n  id\n  name\n  subtitle\n  description\n  contactEmail\n  society {\n    id\n    name\n    slug\n    logo {\n      id\n      url\n    }\n  }\n  featuredImage {\n    id\n    url\n  }\n  status\n  ageRating\n  slug\n  start\n  end\n  minSeatPrice\n  contentWarnings {\n    information\n    warning {\n      id\n      shortDescription\n      longDescription\n    }\n  }\n  isBookable\n}": types.ProductionBasicInfoFragmentDoc,
    "fragment ProductionPerformances on ProductionNode {\n  performances {\n    edges {\n      node {\n        id\n        venue {\n          id\n          name\n          slug\n        }\n        disabled\n        description\n        doorsOpen\n        start\n        end\n        durationMins\n        soldOut\n        isInperson\n        isOnline\n        isBookable\n      }\n    }\n  }\n}": types.ProductionPerformancesFragmentDoc,
    "fragment ProductionsDetailsFragment on ProductionNodeConnection {\n  edges {\n    node {\n      id\n      slug\n      name\n      start\n      end\n      isBookable\n      featuredImage {\n        id\n        url\n      }\n      coverImage {\n        id\n        url\n      }\n      venues {\n        id\n        name\n      }\n      performances(runOn: $nowDate) {\n        edges {\n          node {\n            id\n            doorsOpen\n            start\n            soldOut\n            end\n            venue {\n              id\n              name\n            }\n            production {\n              id\n              name\n              featuredImage {\n                url\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}": types.ProductionsDetailsFragmentFragmentDoc,
    "fragment AuthUserDetails on ExtendedUserNode {\n  firstName\n  lastName\n  email\n  permissions\n}": types.AuthUserDetailsFragmentDoc,
    "mutation generateReport($name: String!, $start: DateTime, $end: DateTime, $options: [ReportOption]) {\n  generateReport(name: $name, startTime: $start, endTime: $end, options: $options) {\n    success\n    downloadUri\n    errors {\n      ... on NonFieldError {\n        message\n        code\n      }\n      ... on FieldError {\n        message\n        code\n        field\n      }\n    }\n  }\n}": types.GenerateReportDocument,
    "mutation concessionTypeMutation($input: ConcessionTypeMutationInput!) {\n  concessionType(input: $input) {\n    success\n    concessionType {\n      id\n    }\n    errors {\n      ... on NonFieldError {\n        message\n      }\n      ... on FieldError {\n        message\n        field\n      }\n    }\n  }\n}": types.ConcessionTypeMutationDocument,
    "mutation deleteDiscountMutation($id: IdInputField!) {\n  deleteDiscount(id: $id) {\n    success\n    errors {\n      ... on NonFieldError {\n        message\n      }\n      ... on FieldError {\n        message\n        field\n      }\n    }\n  }\n}": types.DeleteDiscountMutationDocument,
    "mutation deletePerformanceSeatGroupMutation($id: IdInputField!) {\n  deletePerformanceSeatGroup(id: $id) {\n    success\n    errors {\n      ... on NonFieldError {\n        message\n      }\n      ... on FieldError {\n        message\n        field\n      }\n    }\n  }\n}": types.DeletePerformanceSeatGroupMutationDocument,
    "mutation discountMutation($input: DiscountMutationInput!) {\n  discount(input: $input) {\n    success\n    discount {\n      id\n    }\n    errors {\n      ... on NonFieldError {\n        message\n      }\n      ... on FieldError {\n        message\n        field\n      }\n    }\n  }\n}": types.DiscountMutationDocument,
    "mutation discountRequirementMutation($input: DiscountRequirementMutationInput!) {\n  discountRequirement(input: $input) {\n    success\n    errors {\n      ... on NonFieldError {\n        message\n      }\n      ... on FieldError {\n        message\n        field\n      }\n    }\n  }\n}": types.DiscountRequirementMutationDocument,
    "mutation performanceMutation($input: PerformanceMutationInput!) {\n  performance(input: $input) {\n    success\n    performance {\n      id\n    }\n    errors {\n      ... on NonFieldError {\n        message\n      }\n      ... on FieldError {\n        message\n        field\n      }\n    }\n  }\n}": types.PerformanceMutationDocument,
    "mutation performanceSeatGroup($input: PerformanceSeatGroupMutationInput!) {\n  performanceSeatGroup(input: $input) {\n    success\n    errors {\n      ... on NonFieldError {\n        message\n      }\n      ... on FieldError {\n        message\n        field\n      }\n    }\n  }\n}": types.PerformanceSeatGroupDocument,
    "mutation productionMutation($input: ProductionMutationInput!) {\n  production(input: $input) {\n    success\n    production {\n      id\n      slug\n    }\n    errors {\n      ... on NonFieldError {\n        message\n      }\n      ... on FieldError {\n        message\n        field\n      }\n    }\n  }\n}": types.ProductionMutationDocument,
    "mutation productionPermissionsMutations($productionId: IdInputField!, $permissions: [String]!, $userEmail: String!) {\n  productionPermissions(\n    id: $productionId\n    permissions: $permissions\n    userEmail: $userEmail\n  ) {\n    success\n    errors {\n      ... on NonFieldError {\n        message\n      }\n      ... on FieldError {\n        message\n        field\n      }\n    }\n  }\n}": types.ProductionPermissionsMutationsDocument,
    "mutation setStatus($id: IdInputField!, $status: Status!, $message: String) {\n  setProductionStatus(productionId: $id, status: $status, message: $message) {\n    success\n    errors {\n      ... on NonFieldError {\n        message\n      }\n      ... on FieldError {\n        message\n        field\n      }\n    }\n  }\n}": types.SetStatusDocument,
    "mutation booking($input: BookingMutationInput!) {\n  booking(input: $input) {\n    success\n    booking {\n      ...DetailedBookingDetails\n    }\n    errors {\n      ... on NonFieldError {\n        message\n      }\n      ... on FieldError {\n        message\n        field\n      }\n    }\n  }\n}": types.BookingDocument,
    "mutation cancelPayment($paymentId: IdInputField!) {\n  cancelPayment(paymentId: $paymentId) {\n    success\n    errors {\n      ... on NonFieldError {\n        message\n      }\n      ... on FieldError {\n        message\n        field\n      }\n    }\n  }\n}": types.CancelPaymentDocument,
    "mutation deleteBooking($bookingId: IdInputField!) {\n  deleteBooking(id: $bookingId) {\n    success\n    errors {\n      ... on NonFieldError {\n        message\n      }\n    }\n  }\n}": types.DeleteBookingDocument,
    "mutation payBooking($id: IdInputField!, $totalPence: Int!, $nonce: String, $provider: PaymentProvider, $idempotencyKey: String, $deviceId: String, $verifyToken: String) {\n  payBooking(\n    id: $id\n    nonce: $nonce\n    price: $totalPence\n    paymentProvider: $provider\n    deviceId: $deviceId\n    idempotencyKey: $idempotencyKey\n    verifyToken: $verifyToken\n  ) {\n    success\n    errors {\n      ... on NonFieldError {\n        message\n      }\n      ... on FieldError {\n        message\n        field\n      }\n    }\n    payment {\n      id\n      value\n      currency\n      cardBrand\n      last4\n    }\n    booking {\n      ...DetailedBookingDetails\n    }\n  }\n}": types.PayBookingDocument,
    "mutation setBookingUser($id: ID!, $email: String!) {\n  booking(input: {id: $id, userEmail: $email}) {\n    success\n    errors {\n      ... on NonFieldError {\n        message\n      }\n      ... on FieldError {\n        message\n        field\n      }\n    }\n  }\n}": types.SetBookingUserDocument,
    "mutation checkInBooking($reference: String!, $performanceId: IdInputField!, $tickets: [TicketIDInput]!) {\n  checkInBooking(\n    bookingReference: $reference\n    performance: $performanceId\n    tickets: $tickets\n  ) {\n    success\n    errors {\n      ... on NonFieldError {\n        message\n      }\n      ... on FieldError {\n        message\n        field\n      }\n    }\n    booking {\n      ...DetailedBookingDetails\n    }\n  }\n}": types.CheckInBookingDocument,
    "mutation unCheckInBooking($reference: String!, $performanceId: IdInputField!, $tickets: [TicketIDInput]!) {\n  uncheckInBooking(\n    bookingReference: $reference\n    performance: $performanceId\n    tickets: $tickets\n  ) {\n    success\n    errors {\n      ... on NonFieldError {\n        message\n      }\n      ... on FieldError {\n        message\n        field\n      }\n    }\n    booking {\n      ...DetailedBookingDetails\n    }\n  }\n}": types.UnCheckInBookingDocument,
    "mutation attemptPasswordReset($token: String!, $newPassword: String!, $confirmedNewPassword: String!) {\n  passwordReset(\n    token: $token\n    newPassword1: $newPassword\n    newPassword2: $confirmedNewPassword\n  ) {\n    success\n    errors {\n      ... on NonFieldError {\n        message\n      }\n      ... on FieldError {\n        message\n        field\n      }\n    }\n  }\n}": types.AttemptPasswordResetDocument,
    "query allSocieties($afterCursor: String) {\n  societies(first: 9, after: $afterCursor) {\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n    edges {\n      node {\n        id\n        name\n        slug\n        logo {\n          id\n          url\n        }\n      }\n    }\n  }\n}": types.AllSocietiesDocument,
    "query userDraftBookingForPerformance($performanceID: ID!) {\n  me {\n    bookings(performance: $performanceID, status: \"IN_PROGRESS\", expired: false) {\n      edges {\n        node {\n          ...DetailedBookingDetails\n        }\n      }\n    }\n  }\n}": types.UserDraftBookingForPerformanceDocument,
    "query fullPerformanceAndTicketOptions($id: ID!) {\n  performance(id: $id) {\n    id\n    capacityRemaining\n    venue {\n      id\n      name\n      slug\n    }\n    disabled\n    doorsOpen\n    start\n    end\n    durationMins\n    soldOut\n    isInperson\n    isOnline\n    production {\n      id\n      ...ProductionBasicInfo\n      ...ProductionPerformances\n    }\n    capacityRemaining\n    discounts {\n      edges {\n        node {\n          id\n          name\n          seatGroup {\n            id\n            name\n          }\n          requirements {\n            number\n            concessionType {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n    ticketOptions {\n      ...PerformanceTicketOptionsFragment\n    }\n  }\n}": types.FullPerformanceAndTicketOptionsDocument,
    "query homepageUpcomingProductions($now: DateTime) {\n  productions(first: 5, orderBy: \"start\", end_Gte: $now, status: \"PUBLISHED\") {\n    edges {\n      node {\n        id\n        name\n        slug\n        subtitle\n        description\n        featuredImage {\n          id\n          url\n        }\n        coverImage {\n          id\n          url\n        }\n        society {\n          id\n          name\n          slug\n        }\n        start\n        end\n      }\n    }\n  }\n}": types.HomepageUpcomingProductionsDocument,
    "query performanceTicketOptions($id: ID!) {\n  performance(id: $id) {\n    id\n    capacityRemaining\n    discounts {\n      edges {\n        node {\n          id\n          name\n          seatGroup {\n            id\n            name\n          }\n          requirements {\n            number\n            concessionType {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n    ticketOptions {\n      capacityRemaining\n      seatGroup {\n        id\n        name\n        description\n      }\n      concessionTypes {\n        concessionType {\n          id\n          name\n          description\n        }\n        price\n      }\n    }\n  }\n}": types.PerformanceTicketOptionsDocument,
    "query productionBySlug($slug: String!) {\n  production(slug: $slug) {\n    id\n    name\n    id\n    subtitle\n    description\n    contactEmail\n    society {\n      id\n      name\n      slug\n      logo {\n        id\n        url\n      }\n    }\n    posterImage {\n      id\n      url\n    }\n    featuredImage {\n      id\n      url\n    }\n    coverImage {\n      id\n      url\n    }\n    ageRating\n    facebookEvent\n    slug\n    start\n    end\n    minSeatPrice\n    contentWarnings {\n      information\n      warning {\n        id\n        shortDescription\n        longDescription\n      }\n    }\n    performances(orderBy: \"start\", disabled: false) {\n      edges {\n        node {\n          id\n          venue {\n            id\n            name\n            slug\n            publiclyListed\n          }\n          doorsOpen\n          isBookable\n          start\n          end\n          soldOut\n          durationMins\n          intervalDurationMins\n          isOnline\n          isInperson\n          ticketsBreakdown {\n            totalCapacity\n          }\n        }\n      }\n    }\n    isBookable\n    crew {\n      name\n      role {\n        department\n      }\n    }\n    cast {\n      name\n      role\n      profilePicture {\n        url\n      }\n    }\n    productionTeam {\n      name\n      role\n    }\n  }\n}": types.ProductionBySlugDocument,
    "query society($slug: String!) {\n  society(slug: $slug) {\n    name\n    id\n    description\n    slug\n    logo {\n      id\n      url\n    }\n    banner {\n      id\n      url\n    }\n    website\n    contact\n    productions(orderBy: \"-start\", first: 4) {\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      edges {\n        node {\n          id\n          name\n          end\n          isBookable\n          slug\n        }\n      }\n    }\n  }\n}": types.SocietyDocument,
    "query upcomingProductions($now: DateTime, $afterCursor: String) {\n  productions(\n    first: 9\n    orderBy: \"start\"\n    after: $afterCursor\n    end_Gte: $now\n    status: \"PUBLISHED\"\n  ) {\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n    edges {\n      node {\n        id\n        name\n        slug\n        featuredImage {\n          id\n          url\n        }\n        start\n        end\n        isBookable\n      }\n    }\n  }\n}": types.UpcomingProductionsDocument,
    "query userCompletedBooking($bookingRef: String!) {\n  me {\n    bookings(reference: $bookingRef, statusIn: [\"PAID\", \"CANCELLED\"]) {\n      edges {\n        node {\n          ...BookingWithProductionDetails\n        }\n      }\n    }\n  }\n}": types.UserCompletedBookingDocument,
    "query venues {\n  venues {\n    edges {\n      node {\n        id\n        name\n        internalCapacity\n        image {\n          url\n        }\n        slug\n      }\n    }\n  }\n}": types.VenuesDocument,
    "query warnings {\n  warnings {\n    edges {\n      node {\n        id\n        shortDescription\n        longDescription\n      }\n    }\n  }\n}": types.WarningsDocument,
    "query bookingLookup($reference: String!) {\n  bookings(reference: $reference) {\n    edges {\n      node {\n        ...DetailedBookingDetails\n      }\n    }\n  }\n}": types.BookingLookupDocument,
    "query bookingDetails($bookingReference: String!) {\n  bookings(reference: $bookingReference) {\n    edges {\n      node {\n        ...BookingWithProductionDetails\n        createdAt\n        updatedAt\n        creator {\n          id\n          firstName\n          lastName\n          email\n        }\n        adminDiscountPercentage\n        user {\n          id\n          firstName\n          lastName\n          email\n        }\n      }\n    }\n  }\n}": types.BookingDetailsDocument,
    "query adminPerformanceDetail($productionSlug: String!, $performanceId: ID!) {\n  production(slug: $productionSlug) {\n    id\n    slug\n    name\n    permissions\n    performances(id: $performanceId) {\n      edges {\n        node {\n          id\n          venue {\n            id\n            name\n            slug\n            internalCapacity\n          }\n          description\n          disabled\n          doorsOpen\n          start\n          end\n          durationMins\n          intervalDurationMins\n          soldOut\n          isOnline\n          isInperson\n          isBookable\n          capacity\n          capacityRemaining\n          ticketOptions {\n            ...PerformanceTicketOptionsFragment\n            capacity\n            numberTicketsSold\n          }\n          ticketsBreakdown {\n            totalCapacity\n            totalTicketsSold\n          }\n          salesBreakdown {\n            societyRevenue\n          }\n          discounts {\n            edges {\n              node {\n                id\n                percentage\n                performances {\n                  edges {\n                    node {\n                      id\n                    }\n                  }\n                }\n                seatGroup {\n                  id\n                  name\n                  description\n                }\n                requirements {\n                  id\n                  number\n                  concessionType {\n                    id\n                    name\n                    description\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}": types.AdminPerformanceDetailDocument,
    "query adminPerformancesIndex($productionId: IdInputField, $productionSlug: String, $offset: Int, $disabled: Boolean, $take: Int = 10) {\n  production(id: $productionId, slug: $productionSlug) {\n    id\n    performances(\n      first: $take\n      offset: $offset\n      orderBy: \"start\"\n      disabled: $disabled\n    ) {\n      pageInfo {\n        hasNextPage\n      }\n      edges {\n        node {\n          id\n          venue {\n            id\n            name\n          }\n          minSeatPrice\n          durationMins\n          intervalDurationMins\n          doorsOpen\n          start\n          disabled\n          soldOut\n          isOnline\n          isBookable\n          isInperson\n          ticketsBreakdown {\n            totalCapacity\n            totalTicketsSold\n          }\n        }\n      }\n    }\n  }\n}": types.AdminPerformancesIndexDocument,
    "query adminProductionCompleteBookings($productionSlug: String!, $performanceId: ID, $search: String, $offset: Int, $orderBy: String, $status: String) {\n  production(slug: $productionSlug) {\n    id\n    performances(id: $performanceId) {\n      edges {\n        node {\n          id\n          bookings(\n            search: $search\n            first: 10\n            offset: $offset\n            orderBy: $orderBy\n            status: $status\n            expired: false\n          ) {\n            pageInfo {\n              startCursor\n              endCursor\n              hasNextPage\n              hasPreviousPage\n            }\n            edges {\n              node {\n                ...BasicBookingDetails\n                createdAt\n                creator {\n                  id\n                  firstName\n                  lastName\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}": types.AdminProductionCompleteBookingsDocument,
    "query adminProductionEdit($slug: String!) {\n  production(slug: $slug) {\n    id\n    name\n    subtitle\n    contactEmail\n    society {\n      id\n      name\n      logo {\n        id\n        url\n      }\n    }\n    slug\n    description\n    contentWarnings {\n      information\n      warning {\n        id\n        shortDescription\n        longDescription\n      }\n    }\n    coverImage {\n      id\n      url\n    }\n    featuredImage {\n      id\n      url\n    }\n    posterImage {\n      id\n      url\n    }\n    ageRating\n    facebookEvent\n    performances(orderBy: \"start\") {\n      edges {\n        node {\n          id\n          venue {\n            id\n            name\n          }\n          doorsOpen\n          start\n          soldOut\n          isOnline\n          isInperson\n        }\n      }\n    }\n    isBookable\n  }\n}": types.AdminProductionEditDocument,
    "query adminProductionPermissions($slug: String!) {\n  production(slug: $slug) {\n    id\n    assignablePermissions {\n      name\n      description\n      userCanAssign\n    }\n    assignedUsers {\n      user {\n        id\n        firstName\n        lastName\n        email\n      }\n      assignedPermissions\n    }\n  }\n}": types.AdminProductionPermissionsDocument,
    "query adminProductionShow($slug: String!) {\n  production(slug: $slug) {\n    id\n    name\n    subtitle\n    society {\n      id\n      name\n    }\n    status\n    slug\n    start\n    end\n    isBookable\n    salesBreakdown {\n      societyRevenue\n    }\n    totalCapacity\n    totalTicketsSold\n    permissions\n  }\n}": types.AdminProductionShowDocument,
    "query adminProductions($endGte: DateTime, $offset: Int, $status: String, $startLte: DateTime, $search: String) {\n  productions(\n    first: 10\n    orderBy: \"-start\"\n    userHasPermission: \"view_production\"\n    offset: $offset\n    start_Lte: $startLte\n    end_Gte: $endGte\n    status: $status\n    search: $search\n  ) {\n    pageInfo {\n      hasNextPage\n    }\n    edges {\n      node {\n        id\n        name\n        slug\n        featuredImage {\n          id\n          url\n        }\n        status\n        society {\n          id\n          name\n        }\n        start\n        end\n        isBookable\n      }\n    }\n  }\n}": types.AdminProductionsDocument,
    "query adminSocietiesIndex {\n  societies(userHasPermission: \"add_production\") {\n    edges {\n      node {\n        id\n        name\n        slug\n        logo {\n          id\n          url\n        }\n        permissions\n      }\n    }\n  }\n}": types.AdminSocietiesIndexDocument,
    "query adminVenueDetailed($slug: String!) {\n  venue(slug: $slug) {\n    id\n    name\n    slug\n    description\n    address {\n      ...AddressFields\n    }\n    image {\n      url\n    }\n    internalCapacity\n    seatGroups {\n      edges {\n        node {\n          id\n          name\n          description\n          capacity\n        }\n      }\n    }\n  }\n}": types.AdminVenueDetailedDocument,
    "query boxOfficePaymentDevices {\n  paymentDevices(paymentProvider: SQUARE_POS, paired: true) {\n    id\n    name\n    code\n    deviceId\n    locationId\n  }\n}": types.BoxOfficePaymentDevicesDocument,
    "query boxOfficePerformance($id: ID!) {\n  performance(id: $id) {\n    id\n    capacityRemaining\n    venue {\n      id\n      name\n      slug\n    }\n    disabled\n    doorsOpen\n    start\n    end\n    durationMins\n    soldOut\n    isInperson\n    isOnline\n    production {\n      ...ProductionBasicInfo\n    }\n  }\n}": types.BoxOfficePerformanceDocument,
    "query boxOfficePerformanceBooking($performanceId: ID!, $bookingId: ID!) {\n  performance(id: $performanceId) {\n    id\n    bookings(id: $bookingId) {\n      edges {\n        node {\n          ...DetailedBookingDetails\n        }\n      }\n    }\n  }\n}": types.BoxOfficePerformanceBookingDocument,
    "query boxOfficePerformanceBookings($id: ID!, $search: String, $offset: Int, $orderBy: String, $discount: Float, $checkedIn: Boolean) {\n  performance(id: $id) {\n    id\n    bookings(\n      search: $search\n      first: 10\n      offset: $offset\n      orderBy: $orderBy\n      status: \"PAID\"\n      expired: false\n      adminDiscountPercentage: $discount\n      checkedIn: $checkedIn\n    ) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          ...DetailedBookingDetails\n        }\n      }\n    }\n  }\n}": types.BoxOfficePerformanceBookingsDocument,
    "query boxOfficePerformanceTicketBreakdown($id: ID!) {\n  performance(id: $id) {\n    id\n    ticketsBreakdown {\n      totalCapacity\n      totalTicketsSold\n      totalTicketsCheckedIn\n      totalTicketsToCheckIn\n      totalTicketsAvailable\n    }\n  }\n}": types.BoxOfficePerformanceTicketBreakdownDocument,
    "query boxOfficePerformances($date: Date) {\n  performances(\n    first: 9\n    orderBy: \"start\"\n    runOn: $date\n    hasBoxofficePermissions: true\n  ) {\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n    edges {\n      node {\n        id\n        start\n        doorsOpen\n        production {\n          ...ProductionBasicInfo\n        }\n        venue {\n          id\n          name\n        }\n      }\n    }\n  }\n}": types.BoxOfficePerformancesDocument,
    "query performanceById($id: ID!) {\n  performance(id: $id) {\n    id\n    doorsOpen\n    start\n    end\n    production {\n      ...ProductionBasicInfo\n    }\n  }\n}": types.PerformanceByIdDocument,
    "query allUpcomingProductions($now: DateTime!) {\n  productions(orderBy: \"start\", end_Gte: $now, status: \"PUBLISHED\") {\n    edges {\n      node {\n        id\n        slug\n        name\n        start\n        end\n        isBookable\n        featuredImage {\n          id\n          url\n        }\n        venues {\n          id\n          name\n        }\n      }\n    }\n  }\n}": types.AllUpcomingProductionsDocument,
    "query venueUpcomingProductions($slug: String!, $now: DateTime!, $nowDate: Date) {\n  venue(slug: $slug) {\n    id\n    name\n    productions(orderBy: \"start\", end_Gte: $now, status: \"PUBLISHED\") {\n      ...ProductionsDetailsFragment\n    }\n  }\n}": types.VenueUpcomingProductionsDocument,
    "query completeBookings($afterCursor: String, $active: Boolean, $orderBy: String = \"start\", $offset: Int, $max: Int = 10) {\n  me {\n    bookings(\n      statusIn: [\"PAID\", \"CANCELLED\"]\n      first: $max\n      orderBy: $orderBy\n      active: $active\n      offset: $offset\n      after: $afterCursor\n    ) {\n      pageInfo {\n        hasNextPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          ...BasicBookingDetails\n        }\n      }\n    }\n  }\n}": types.CompleteBookingsDocument,
    "query myAccountDetails {\n  me {\n    firstName\n    lastName\n    email\n  }\n}": types.MyAccountDetailsDocument,
};

export function graphql(source: "fragment AddressFields on AddressNode {\n  id\n  buildingNumber\n  buildingName\n  street\n  city\n  postcode\n  latitude\n  longitude\n}"): (typeof documents)["fragment AddressFields on AddressNode {\n  id\n  buildingNumber\n  buildingName\n  street\n  city\n  postcode\n  latitude\n  longitude\n}"];
export function graphql(source: "fragment AllPriceBreakdown on PriceBreakdownNode {\n  tickets {\n    number\n    seatGroup {\n      id\n      name\n    }\n    concessionType {\n      id\n      name\n    }\n    totalPrice\n  }\n  miscCosts {\n    name\n    description\n    percentage\n    value\n  }\n  ticketsPrice\n  ticketsDiscountedPrice\n  discountsValue\n  subtotalPrice\n  miscCostsValue\n  totalPrice\n}"): (typeof documents)["fragment AllPriceBreakdown on PriceBreakdownNode {\n  tickets {\n    number\n    seatGroup {\n      id\n      name\n    }\n    concessionType {\n      id\n      name\n    }\n    totalPrice\n  }\n  miscCosts {\n    name\n    description\n    percentage\n    value\n  }\n  ticketsPrice\n  ticketsDiscountedPrice\n  discountsValue\n  subtotalPrice\n  miscCostsValue\n  totalPrice\n}"];
export function graphql(source: "fragment BasicBookingDetails on BookingNode {\n  id\n  reference\n  status\n  user {\n    id\n    firstName\n    lastName\n  }\n  performance {\n    id\n    start\n    end\n    production {\n      id\n      name\n      slug\n    }\n  }\n  tickets {\n    id\n  }\n}"): (typeof documents)["fragment BasicBookingDetails on BookingNode {\n  id\n  reference\n  status\n  user {\n    id\n    firstName\n    lastName\n  }\n  performance {\n    id\n    start\n    end\n    production {\n      id\n      name\n      slug\n    }\n  }\n  tickets {\n    id\n  }\n}"];
export function graphql(source: "fragment BookingPaymentDetails on BookingNode {\n  transactions {\n    edges {\n      node {\n        id\n        createdAt\n        type\n        providerName\n        providerTransactionId\n        providerFee\n        value\n        cardBrand\n        last4\n      }\n    }\n  }\n}"): (typeof documents)["fragment BookingPaymentDetails on BookingNode {\n  transactions {\n    edges {\n      node {\n        id\n        createdAt\n        type\n        providerName\n        providerTransactionId\n        providerFee\n        value\n        cardBrand\n        last4\n      }\n    }\n  }\n}"];
export function graphql(source: "fragment BookingTicketDetails on BookingNode {\n  tickets {\n    id\n    seatGroup {\n      id\n      name\n    }\n    concessionType {\n      id\n      name\n    }\n    checkedIn\n  }\n}"): (typeof documents)["fragment BookingTicketDetails on BookingNode {\n  tickets {\n    id\n    seatGroup {\n      id\n      name\n    }\n    concessionType {\n      id\n      name\n    }\n    checkedIn\n  }\n}"];
export function graphql(source: "fragment BookingWithProductionDetails on BookingNode {\n  id\n  reference\n  status\n  priceBreakdown {\n    ...AllPriceBreakdown\n  }\n  tickets {\n    id\n    seatGroup {\n      id\n      name\n    }\n    concessionType {\n      id\n      name\n    }\n  }\n  performance {\n    id\n    production {\n      id\n      name\n      slug\n      subtitle\n      society {\n        id\n        name\n        slug\n        logo {\n          id\n          url\n        }\n      }\n      featuredImage {\n        id\n        url\n      }\n    }\n    start\n    end\n    doorsOpen\n    durationMins\n    intervalDurationMins\n    venue {\n      id\n      slug\n    }\n  }\n  transactions {\n    edges {\n      node {\n        id\n        createdAt\n        type\n        providerName\n        providerTransactionId\n        providerFee\n        value\n        cardBrand\n        last4\n      }\n    }\n  }\n}"): (typeof documents)["fragment BookingWithProductionDetails on BookingNode {\n  id\n  reference\n  status\n  priceBreakdown {\n    ...AllPriceBreakdown\n  }\n  tickets {\n    id\n    seatGroup {\n      id\n      name\n    }\n    concessionType {\n      id\n      name\n    }\n  }\n  performance {\n    id\n    production {\n      id\n      name\n      slug\n      subtitle\n      society {\n        id\n        name\n        slug\n        logo {\n          id\n          url\n        }\n      }\n      featuredImage {\n        id\n        url\n      }\n    }\n    start\n    end\n    doorsOpen\n    durationMins\n    intervalDurationMins\n    venue {\n      id\n      slug\n    }\n  }\n  transactions {\n    edges {\n      node {\n        id\n        createdAt\n        type\n        providerName\n        providerTransactionId\n        providerFee\n        value\n        cardBrand\n        last4\n      }\n    }\n  }\n}"];
export function graphql(source: "fragment DetailedBookingDetails on BookingNode {\n  id\n  reference\n  expired\n  expiresAt\n  status\n  user {\n    id\n    firstName\n    lastName\n  }\n  salesBreakdown {\n    totalPayments\n  }\n  priceBreakdown {\n    ...AllPriceBreakdown\n  }\n  ...BookingTicketDetails\n  ...BookingPaymentDetails\n  performance {\n    id\n    production {\n      id\n      name\n      slug\n    }\n    start\n    end\n    doorsOpen\n    venue {\n      id\n      slug\n    }\n    durationMins\n    intervalDurationMins\n  }\n}"): (typeof documents)["fragment DetailedBookingDetails on BookingNode {\n  id\n  reference\n  expired\n  expiresAt\n  status\n  user {\n    id\n    firstName\n    lastName\n  }\n  salesBreakdown {\n    totalPayments\n  }\n  priceBreakdown {\n    ...AllPriceBreakdown\n  }\n  ...BookingTicketDetails\n  ...BookingPaymentDetails\n  performance {\n    id\n    production {\n      id\n      name\n      slug\n    }\n    start\n    end\n    doorsOpen\n    venue {\n      id\n      slug\n    }\n    durationMins\n    intervalDurationMins\n  }\n}"];
export function graphql(source: "fragment PerformanceTicketOptionsFragment on PerformanceSeatGroupNode {\n  id\n  capacityRemaining\n  price\n  seatGroup {\n    id\n    name\n    description\n    capacity\n  }\n  concessionTypes {\n    concessionType {\n      id\n      name\n      description\n    }\n    price\n  }\n}"): (typeof documents)["fragment PerformanceTicketOptionsFragment on PerformanceSeatGroupNode {\n  id\n  capacityRemaining\n  price\n  seatGroup {\n    id\n    name\n    description\n    capacity\n  }\n  concessionTypes {\n    concessionType {\n      id\n      name\n      description\n    }\n    price\n  }\n}"];
export function graphql(source: "fragment ProductionBasicInfo on ProductionNode {\n  id\n  name\n  subtitle\n  description\n  contactEmail\n  society {\n    id\n    name\n    slug\n    logo {\n      id\n      url\n    }\n  }\n  featuredImage {\n    id\n    url\n  }\n  status\n  ageRating\n  slug\n  start\n  end\n  minSeatPrice\n  contentWarnings {\n    information\n    warning {\n      id\n      shortDescription\n      longDescription\n    }\n  }\n  isBookable\n}"): (typeof documents)["fragment ProductionBasicInfo on ProductionNode {\n  id\n  name\n  subtitle\n  description\n  contactEmail\n  society {\n    id\n    name\n    slug\n    logo {\n      id\n      url\n    }\n  }\n  featuredImage {\n    id\n    url\n  }\n  status\n  ageRating\n  slug\n  start\n  end\n  minSeatPrice\n  contentWarnings {\n    information\n    warning {\n      id\n      shortDescription\n      longDescription\n    }\n  }\n  isBookable\n}"];
export function graphql(source: "fragment ProductionPerformances on ProductionNode {\n  performances {\n    edges {\n      node {\n        id\n        venue {\n          id\n          name\n          slug\n        }\n        disabled\n        description\n        doorsOpen\n        start\n        end\n        durationMins\n        soldOut\n        isInperson\n        isOnline\n        isBookable\n      }\n    }\n  }\n}"): (typeof documents)["fragment ProductionPerformances on ProductionNode {\n  performances {\n    edges {\n      node {\n        id\n        venue {\n          id\n          name\n          slug\n        }\n        disabled\n        description\n        doorsOpen\n        start\n        end\n        durationMins\n        soldOut\n        isInperson\n        isOnline\n        isBookable\n      }\n    }\n  }\n}"];
export function graphql(source: "fragment ProductionsDetailsFragment on ProductionNodeConnection {\n  edges {\n    node {\n      id\n      slug\n      name\n      start\n      end\n      isBookable\n      featuredImage {\n        id\n        url\n      }\n      coverImage {\n        id\n        url\n      }\n      venues {\n        id\n        name\n      }\n      performances(runOn: $nowDate) {\n        edges {\n          node {\n            id\n            doorsOpen\n            start\n            soldOut\n            end\n            venue {\n              id\n              name\n            }\n            production {\n              id\n              name\n              featuredImage {\n                url\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}"): (typeof documents)["fragment ProductionsDetailsFragment on ProductionNodeConnection {\n  edges {\n    node {\n      id\n      slug\n      name\n      start\n      end\n      isBookable\n      featuredImage {\n        id\n        url\n      }\n      coverImage {\n        id\n        url\n      }\n      venues {\n        id\n        name\n      }\n      performances(runOn: $nowDate) {\n        edges {\n          node {\n            id\n            doorsOpen\n            start\n            soldOut\n            end\n            venue {\n              id\n              name\n            }\n            production {\n              id\n              name\n              featuredImage {\n                url\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}"];
export function graphql(source: "fragment AuthUserDetails on ExtendedUserNode {\n  firstName\n  lastName\n  email\n  permissions\n}"): (typeof documents)["fragment AuthUserDetails on ExtendedUserNode {\n  firstName\n  lastName\n  email\n  permissions\n}"];
export function graphql(source: "mutation generateReport($name: String!, $start: DateTime, $end: DateTime, $options: [ReportOption]) {\n  generateReport(name: $name, startTime: $start, endTime: $end, options: $options) {\n    success\n    downloadUri\n    errors {\n      ... on NonFieldError {\n        message\n        code\n      }\n      ... on FieldError {\n        message\n        code\n        field\n      }\n    }\n  }\n}"): (typeof documents)["mutation generateReport($name: String!, $start: DateTime, $end: DateTime, $options: [ReportOption]) {\n  generateReport(name: $name, startTime: $start, endTime: $end, options: $options) {\n    success\n    downloadUri\n    errors {\n      ... on NonFieldError {\n        message\n        code\n      }\n      ... on FieldError {\n        message\n        code\n        field\n      }\n    }\n  }\n}"];
export function graphql(source: "mutation concessionTypeMutation($input: ConcessionTypeMutationInput!) {\n  concessionType(input: $input) {\n    success\n    concessionType {\n      id\n    }\n    errors {\n      ... on NonFieldError {\n        message\n      }\n      ... on FieldError {\n        message\n        field\n      }\n    }\n  }\n}"): (typeof documents)["mutation concessionTypeMutation($input: ConcessionTypeMutationInput!) {\n  concessionType(input: $input) {\n    success\n    concessionType {\n      id\n    }\n    errors {\n      ... on NonFieldError {\n        message\n      }\n      ... on FieldError {\n        message\n        field\n      }\n    }\n  }\n}"];
export function graphql(source: "mutation deleteDiscountMutation($id: IdInputField!) {\n  deleteDiscount(id: $id) {\n    success\n    errors {\n      ... on NonFieldError {\n        message\n      }\n      ... on FieldError {\n        message\n        field\n      }\n    }\n  }\n}"): (typeof documents)["mutation deleteDiscountMutation($id: IdInputField!) {\n  deleteDiscount(id: $id) {\n    success\n    errors {\n      ... on NonFieldError {\n        message\n      }\n      ... on FieldError {\n        message\n        field\n      }\n    }\n  }\n}"];
export function graphql(source: "mutation deletePerformanceSeatGroupMutation($id: IdInputField!) {\n  deletePerformanceSeatGroup(id: $id) {\n    success\n    errors {\n      ... on NonFieldError {\n        message\n      }\n      ... on FieldError {\n        message\n        field\n      }\n    }\n  }\n}"): (typeof documents)["mutation deletePerformanceSeatGroupMutation($id: IdInputField!) {\n  deletePerformanceSeatGroup(id: $id) {\n    success\n    errors {\n      ... on NonFieldError {\n        message\n      }\n      ... on FieldError {\n        message\n        field\n      }\n    }\n  }\n}"];
export function graphql(source: "mutation discountMutation($input: DiscountMutationInput!) {\n  discount(input: $input) {\n    success\n    discount {\n      id\n    }\n    errors {\n      ... on NonFieldError {\n        message\n      }\n      ... on FieldError {\n        message\n        field\n      }\n    }\n  }\n}"): (typeof documents)["mutation discountMutation($input: DiscountMutationInput!) {\n  discount(input: $input) {\n    success\n    discount {\n      id\n    }\n    errors {\n      ... on NonFieldError {\n        message\n      }\n      ... on FieldError {\n        message\n        field\n      }\n    }\n  }\n}"];
export function graphql(source: "mutation discountRequirementMutation($input: DiscountRequirementMutationInput!) {\n  discountRequirement(input: $input) {\n    success\n    errors {\n      ... on NonFieldError {\n        message\n      }\n      ... on FieldError {\n        message\n        field\n      }\n    }\n  }\n}"): (typeof documents)["mutation discountRequirementMutation($input: DiscountRequirementMutationInput!) {\n  discountRequirement(input: $input) {\n    success\n    errors {\n      ... on NonFieldError {\n        message\n      }\n      ... on FieldError {\n        message\n        field\n      }\n    }\n  }\n}"];
export function graphql(source: "mutation performanceMutation($input: PerformanceMutationInput!) {\n  performance(input: $input) {\n    success\n    performance {\n      id\n    }\n    errors {\n      ... on NonFieldError {\n        message\n      }\n      ... on FieldError {\n        message\n        field\n      }\n    }\n  }\n}"): (typeof documents)["mutation performanceMutation($input: PerformanceMutationInput!) {\n  performance(input: $input) {\n    success\n    performance {\n      id\n    }\n    errors {\n      ... on NonFieldError {\n        message\n      }\n      ... on FieldError {\n        message\n        field\n      }\n    }\n  }\n}"];
export function graphql(source: "mutation performanceSeatGroup($input: PerformanceSeatGroupMutationInput!) {\n  performanceSeatGroup(input: $input) {\n    success\n    errors {\n      ... on NonFieldError {\n        message\n      }\n      ... on FieldError {\n        message\n        field\n      }\n    }\n  }\n}"): (typeof documents)["mutation performanceSeatGroup($input: PerformanceSeatGroupMutationInput!) {\n  performanceSeatGroup(input: $input) {\n    success\n    errors {\n      ... on NonFieldError {\n        message\n      }\n      ... on FieldError {\n        message\n        field\n      }\n    }\n  }\n}"];
export function graphql(source: "mutation productionMutation($input: ProductionMutationInput!) {\n  production(input: $input) {\n    success\n    production {\n      id\n      slug\n    }\n    errors {\n      ... on NonFieldError {\n        message\n      }\n      ... on FieldError {\n        message\n        field\n      }\n    }\n  }\n}"): (typeof documents)["mutation productionMutation($input: ProductionMutationInput!) {\n  production(input: $input) {\n    success\n    production {\n      id\n      slug\n    }\n    errors {\n      ... on NonFieldError {\n        message\n      }\n      ... on FieldError {\n        message\n        field\n      }\n    }\n  }\n}"];
export function graphql(source: "mutation productionPermissionsMutations($productionId: IdInputField!, $permissions: [String]!, $userEmail: String!) {\n  productionPermissions(\n    id: $productionId\n    permissions: $permissions\n    userEmail: $userEmail\n  ) {\n    success\n    errors {\n      ... on NonFieldError {\n        message\n      }\n      ... on FieldError {\n        message\n        field\n      }\n    }\n  }\n}"): (typeof documents)["mutation productionPermissionsMutations($productionId: IdInputField!, $permissions: [String]!, $userEmail: String!) {\n  productionPermissions(\n    id: $productionId\n    permissions: $permissions\n    userEmail: $userEmail\n  ) {\n    success\n    errors {\n      ... on NonFieldError {\n        message\n      }\n      ... on FieldError {\n        message\n        field\n      }\n    }\n  }\n}"];
export function graphql(source: "mutation setStatus($id: IdInputField!, $status: Status!, $message: String) {\n  setProductionStatus(productionId: $id, status: $status, message: $message) {\n    success\n    errors {\n      ... on NonFieldError {\n        message\n      }\n      ... on FieldError {\n        message\n        field\n      }\n    }\n  }\n}"): (typeof documents)["mutation setStatus($id: IdInputField!, $status: Status!, $message: String) {\n  setProductionStatus(productionId: $id, status: $status, message: $message) {\n    success\n    errors {\n      ... on NonFieldError {\n        message\n      }\n      ... on FieldError {\n        message\n        field\n      }\n    }\n  }\n}"];
export function graphql(source: "mutation booking($input: BookingMutationInput!) {\n  booking(input: $input) {\n    success\n    booking {\n      ...DetailedBookingDetails\n    }\n    errors {\n      ... on NonFieldError {\n        message\n      }\n      ... on FieldError {\n        message\n        field\n      }\n    }\n  }\n}"): (typeof documents)["mutation booking($input: BookingMutationInput!) {\n  booking(input: $input) {\n    success\n    booking {\n      ...DetailedBookingDetails\n    }\n    errors {\n      ... on NonFieldError {\n        message\n      }\n      ... on FieldError {\n        message\n        field\n      }\n    }\n  }\n}"];
export function graphql(source: "mutation cancelPayment($paymentId: IdInputField!) {\n  cancelPayment(paymentId: $paymentId) {\n    success\n    errors {\n      ... on NonFieldError {\n        message\n      }\n      ... on FieldError {\n        message\n        field\n      }\n    }\n  }\n}"): (typeof documents)["mutation cancelPayment($paymentId: IdInputField!) {\n  cancelPayment(paymentId: $paymentId) {\n    success\n    errors {\n      ... on NonFieldError {\n        message\n      }\n      ... on FieldError {\n        message\n        field\n      }\n    }\n  }\n}"];
export function graphql(source: "mutation deleteBooking($bookingId: IdInputField!) {\n  deleteBooking(id: $bookingId) {\n    success\n    errors {\n      ... on NonFieldError {\n        message\n      }\n    }\n  }\n}"): (typeof documents)["mutation deleteBooking($bookingId: IdInputField!) {\n  deleteBooking(id: $bookingId) {\n    success\n    errors {\n      ... on NonFieldError {\n        message\n      }\n    }\n  }\n}"];
export function graphql(source: "mutation payBooking($id: IdInputField!, $totalPence: Int!, $nonce: String, $provider: PaymentProvider, $idempotencyKey: String, $deviceId: String, $verifyToken: String) {\n  payBooking(\n    id: $id\n    nonce: $nonce\n    price: $totalPence\n    paymentProvider: $provider\n    deviceId: $deviceId\n    idempotencyKey: $idempotencyKey\n    verifyToken: $verifyToken\n  ) {\n    success\n    errors {\n      ... on NonFieldError {\n        message\n      }\n      ... on FieldError {\n        message\n        field\n      }\n    }\n    payment {\n      id\n      value\n      currency\n      cardBrand\n      last4\n    }\n    booking {\n      ...DetailedBookingDetails\n    }\n  }\n}"): (typeof documents)["mutation payBooking($id: IdInputField!, $totalPence: Int!, $nonce: String, $provider: PaymentProvider, $idempotencyKey: String, $deviceId: String, $verifyToken: String) {\n  payBooking(\n    id: $id\n    nonce: $nonce\n    price: $totalPence\n    paymentProvider: $provider\n    deviceId: $deviceId\n    idempotencyKey: $idempotencyKey\n    verifyToken: $verifyToken\n  ) {\n    success\n    errors {\n      ... on NonFieldError {\n        message\n      }\n      ... on FieldError {\n        message\n        field\n      }\n    }\n    payment {\n      id\n      value\n      currency\n      cardBrand\n      last4\n    }\n    booking {\n      ...DetailedBookingDetails\n    }\n  }\n}"];
export function graphql(source: "mutation setBookingUser($id: ID!, $email: String!) {\n  booking(input: {id: $id, userEmail: $email}) {\n    success\n    errors {\n      ... on NonFieldError {\n        message\n      }\n      ... on FieldError {\n        message\n        field\n      }\n    }\n  }\n}"): (typeof documents)["mutation setBookingUser($id: ID!, $email: String!) {\n  booking(input: {id: $id, userEmail: $email}) {\n    success\n    errors {\n      ... on NonFieldError {\n        message\n      }\n      ... on FieldError {\n        message\n        field\n      }\n    }\n  }\n}"];
export function graphql(source: "mutation checkInBooking($reference: String!, $performanceId: IdInputField!, $tickets: [TicketIDInput]!) {\n  checkInBooking(\n    bookingReference: $reference\n    performance: $performanceId\n    tickets: $tickets\n  ) {\n    success\n    errors {\n      ... on NonFieldError {\n        message\n      }\n      ... on FieldError {\n        message\n        field\n      }\n    }\n    booking {\n      ...DetailedBookingDetails\n    }\n  }\n}"): (typeof documents)["mutation checkInBooking($reference: String!, $performanceId: IdInputField!, $tickets: [TicketIDInput]!) {\n  checkInBooking(\n    bookingReference: $reference\n    performance: $performanceId\n    tickets: $tickets\n  ) {\n    success\n    errors {\n      ... on NonFieldError {\n        message\n      }\n      ... on FieldError {\n        message\n        field\n      }\n    }\n    booking {\n      ...DetailedBookingDetails\n    }\n  }\n}"];
export function graphql(source: "mutation unCheckInBooking($reference: String!, $performanceId: IdInputField!, $tickets: [TicketIDInput]!) {\n  uncheckInBooking(\n    bookingReference: $reference\n    performance: $performanceId\n    tickets: $tickets\n  ) {\n    success\n    errors {\n      ... on NonFieldError {\n        message\n      }\n      ... on FieldError {\n        message\n        field\n      }\n    }\n    booking {\n      ...DetailedBookingDetails\n    }\n  }\n}"): (typeof documents)["mutation unCheckInBooking($reference: String!, $performanceId: IdInputField!, $tickets: [TicketIDInput]!) {\n  uncheckInBooking(\n    bookingReference: $reference\n    performance: $performanceId\n    tickets: $tickets\n  ) {\n    success\n    errors {\n      ... on NonFieldError {\n        message\n      }\n      ... on FieldError {\n        message\n        field\n      }\n    }\n    booking {\n      ...DetailedBookingDetails\n    }\n  }\n}"];
export function graphql(source: "mutation attemptPasswordReset($token: String!, $newPassword: String!, $confirmedNewPassword: String!) {\n  passwordReset(\n    token: $token\n    newPassword1: $newPassword\n    newPassword2: $confirmedNewPassword\n  ) {\n    success\n    errors {\n      ... on NonFieldError {\n        message\n      }\n      ... on FieldError {\n        message\n        field\n      }\n    }\n  }\n}"): (typeof documents)["mutation attemptPasswordReset($token: String!, $newPassword: String!, $confirmedNewPassword: String!) {\n  passwordReset(\n    token: $token\n    newPassword1: $newPassword\n    newPassword2: $confirmedNewPassword\n  ) {\n    success\n    errors {\n      ... on NonFieldError {\n        message\n      }\n      ... on FieldError {\n        message\n        field\n      }\n    }\n  }\n}"];
export function graphql(source: "query allSocieties($afterCursor: String) {\n  societies(first: 9, after: $afterCursor) {\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n    edges {\n      node {\n        id\n        name\n        slug\n        logo {\n          id\n          url\n        }\n      }\n    }\n  }\n}"): (typeof documents)["query allSocieties($afterCursor: String) {\n  societies(first: 9, after: $afterCursor) {\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n    edges {\n      node {\n        id\n        name\n        slug\n        logo {\n          id\n          url\n        }\n      }\n    }\n  }\n}"];
export function graphql(source: "query userDraftBookingForPerformance($performanceID: ID!) {\n  me {\n    bookings(performance: $performanceID, status: \"IN_PROGRESS\", expired: false) {\n      edges {\n        node {\n          ...DetailedBookingDetails\n        }\n      }\n    }\n  }\n}"): (typeof documents)["query userDraftBookingForPerformance($performanceID: ID!) {\n  me {\n    bookings(performance: $performanceID, status: \"IN_PROGRESS\", expired: false) {\n      edges {\n        node {\n          ...DetailedBookingDetails\n        }\n      }\n    }\n  }\n}"];
export function graphql(source: "query fullPerformanceAndTicketOptions($id: ID!) {\n  performance(id: $id) {\n    id\n    capacityRemaining\n    venue {\n      id\n      name\n      slug\n    }\n    disabled\n    doorsOpen\n    start\n    end\n    durationMins\n    soldOut\n    isInperson\n    isOnline\n    production {\n      id\n      ...ProductionBasicInfo\n      ...ProductionPerformances\n    }\n    capacityRemaining\n    discounts {\n      edges {\n        node {\n          id\n          name\n          seatGroup {\n            id\n            name\n          }\n          requirements {\n            number\n            concessionType {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n    ticketOptions {\n      ...PerformanceTicketOptionsFragment\n    }\n  }\n}"): (typeof documents)["query fullPerformanceAndTicketOptions($id: ID!) {\n  performance(id: $id) {\n    id\n    capacityRemaining\n    venue {\n      id\n      name\n      slug\n    }\n    disabled\n    doorsOpen\n    start\n    end\n    durationMins\n    soldOut\n    isInperson\n    isOnline\n    production {\n      id\n      ...ProductionBasicInfo\n      ...ProductionPerformances\n    }\n    capacityRemaining\n    discounts {\n      edges {\n        node {\n          id\n          name\n          seatGroup {\n            id\n            name\n          }\n          requirements {\n            number\n            concessionType {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n    ticketOptions {\n      ...PerformanceTicketOptionsFragment\n    }\n  }\n}"];
export function graphql(source: "query homepageUpcomingProductions($now: DateTime) {\n  productions(first: 5, orderBy: \"start\", end_Gte: $now, status: \"PUBLISHED\") {\n    edges {\n      node {\n        id\n        name\n        slug\n        subtitle\n        description\n        featuredImage {\n          id\n          url\n        }\n        coverImage {\n          id\n          url\n        }\n        society {\n          id\n          name\n          slug\n        }\n        start\n        end\n      }\n    }\n  }\n}"): (typeof documents)["query homepageUpcomingProductions($now: DateTime) {\n  productions(first: 5, orderBy: \"start\", end_Gte: $now, status: \"PUBLISHED\") {\n    edges {\n      node {\n        id\n        name\n        slug\n        subtitle\n        description\n        featuredImage {\n          id\n          url\n        }\n        coverImage {\n          id\n          url\n        }\n        society {\n          id\n          name\n          slug\n        }\n        start\n        end\n      }\n    }\n  }\n}"];
export function graphql(source: "query performanceTicketOptions($id: ID!) {\n  performance(id: $id) {\n    id\n    capacityRemaining\n    discounts {\n      edges {\n        node {\n          id\n          name\n          seatGroup {\n            id\n            name\n          }\n          requirements {\n            number\n            concessionType {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n    ticketOptions {\n      capacityRemaining\n      seatGroup {\n        id\n        name\n        description\n      }\n      concessionTypes {\n        concessionType {\n          id\n          name\n          description\n        }\n        price\n      }\n    }\n  }\n}"): (typeof documents)["query performanceTicketOptions($id: ID!) {\n  performance(id: $id) {\n    id\n    capacityRemaining\n    discounts {\n      edges {\n        node {\n          id\n          name\n          seatGroup {\n            id\n            name\n          }\n          requirements {\n            number\n            concessionType {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n    ticketOptions {\n      capacityRemaining\n      seatGroup {\n        id\n        name\n        description\n      }\n      concessionTypes {\n        concessionType {\n          id\n          name\n          description\n        }\n        price\n      }\n    }\n  }\n}"];
export function graphql(source: "query productionBySlug($slug: String!) {\n  production(slug: $slug) {\n    id\n    name\n    id\n    subtitle\n    description\n    contactEmail\n    society {\n      id\n      name\n      slug\n      logo {\n        id\n        url\n      }\n    }\n    posterImage {\n      id\n      url\n    }\n    featuredImage {\n      id\n      url\n    }\n    coverImage {\n      id\n      url\n    }\n    ageRating\n    facebookEvent\n    slug\n    start\n    end\n    minSeatPrice\n    contentWarnings {\n      information\n      warning {\n        id\n        shortDescription\n        longDescription\n      }\n    }\n    performances(orderBy: \"start\", disabled: false) {\n      edges {\n        node {\n          id\n          venue {\n            id\n            name\n            slug\n            publiclyListed\n          }\n          doorsOpen\n          isBookable\n          start\n          end\n          soldOut\n          durationMins\n          intervalDurationMins\n          isOnline\n          isInperson\n          ticketsBreakdown {\n            totalCapacity\n          }\n        }\n      }\n    }\n    isBookable\n    crew {\n      name\n      role {\n        department\n      }\n    }\n    cast {\n      name\n      role\n      profilePicture {\n        url\n      }\n    }\n    productionTeam {\n      name\n      role\n    }\n  }\n}"): (typeof documents)["query productionBySlug($slug: String!) {\n  production(slug: $slug) {\n    id\n    name\n    id\n    subtitle\n    description\n    contactEmail\n    society {\n      id\n      name\n      slug\n      logo {\n        id\n        url\n      }\n    }\n    posterImage {\n      id\n      url\n    }\n    featuredImage {\n      id\n      url\n    }\n    coverImage {\n      id\n      url\n    }\n    ageRating\n    facebookEvent\n    slug\n    start\n    end\n    minSeatPrice\n    contentWarnings {\n      information\n      warning {\n        id\n        shortDescription\n        longDescription\n      }\n    }\n    performances(orderBy: \"start\", disabled: false) {\n      edges {\n        node {\n          id\n          venue {\n            id\n            name\n            slug\n            publiclyListed\n          }\n          doorsOpen\n          isBookable\n          start\n          end\n          soldOut\n          durationMins\n          intervalDurationMins\n          isOnline\n          isInperson\n          ticketsBreakdown {\n            totalCapacity\n          }\n        }\n      }\n    }\n    isBookable\n    crew {\n      name\n      role {\n        department\n      }\n    }\n    cast {\n      name\n      role\n      profilePicture {\n        url\n      }\n    }\n    productionTeam {\n      name\n      role\n    }\n  }\n}"];
export function graphql(source: "query society($slug: String!) {\n  society(slug: $slug) {\n    name\n    id\n    description\n    slug\n    logo {\n      id\n      url\n    }\n    banner {\n      id\n      url\n    }\n    website\n    contact\n    productions(orderBy: \"-start\", first: 4) {\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      edges {\n        node {\n          id\n          name\n          end\n          isBookable\n          slug\n        }\n      }\n    }\n  }\n}"): (typeof documents)["query society($slug: String!) {\n  society(slug: $slug) {\n    name\n    id\n    description\n    slug\n    logo {\n      id\n      url\n    }\n    banner {\n      id\n      url\n    }\n    website\n    contact\n    productions(orderBy: \"-start\", first: 4) {\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      edges {\n        node {\n          id\n          name\n          end\n          isBookable\n          slug\n        }\n      }\n    }\n  }\n}"];
export function graphql(source: "query upcomingProductions($now: DateTime, $afterCursor: String) {\n  productions(\n    first: 9\n    orderBy: \"start\"\n    after: $afterCursor\n    end_Gte: $now\n    status: \"PUBLISHED\"\n  ) {\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n    edges {\n      node {\n        id\n        name\n        slug\n        featuredImage {\n          id\n          url\n        }\n        start\n        end\n        isBookable\n      }\n    }\n  }\n}"): (typeof documents)["query upcomingProductions($now: DateTime, $afterCursor: String) {\n  productions(\n    first: 9\n    orderBy: \"start\"\n    after: $afterCursor\n    end_Gte: $now\n    status: \"PUBLISHED\"\n  ) {\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n    edges {\n      node {\n        id\n        name\n        slug\n        featuredImage {\n          id\n          url\n        }\n        start\n        end\n        isBookable\n      }\n    }\n  }\n}"];
export function graphql(source: "query userCompletedBooking($bookingRef: String!) {\n  me {\n    bookings(reference: $bookingRef, statusIn: [\"PAID\", \"CANCELLED\"]) {\n      edges {\n        node {\n          ...BookingWithProductionDetails\n        }\n      }\n    }\n  }\n}"): (typeof documents)["query userCompletedBooking($bookingRef: String!) {\n  me {\n    bookings(reference: $bookingRef, statusIn: [\"PAID\", \"CANCELLED\"]) {\n      edges {\n        node {\n          ...BookingWithProductionDetails\n        }\n      }\n    }\n  }\n}"];
export function graphql(source: "query venues {\n  venues {\n    edges {\n      node {\n        id\n        name\n        internalCapacity\n        image {\n          url\n        }\n        slug\n      }\n    }\n  }\n}"): (typeof documents)["query venues {\n  venues {\n    edges {\n      node {\n        id\n        name\n        internalCapacity\n        image {\n          url\n        }\n        slug\n      }\n    }\n  }\n}"];
export function graphql(source: "query warnings {\n  warnings {\n    edges {\n      node {\n        id\n        shortDescription\n        longDescription\n      }\n    }\n  }\n}"): (typeof documents)["query warnings {\n  warnings {\n    edges {\n      node {\n        id\n        shortDescription\n        longDescription\n      }\n    }\n  }\n}"];
export function graphql(source: "query bookingLookup($reference: String!) {\n  bookings(reference: $reference) {\n    edges {\n      node {\n        ...DetailedBookingDetails\n      }\n    }\n  }\n}"): (typeof documents)["query bookingLookup($reference: String!) {\n  bookings(reference: $reference) {\n    edges {\n      node {\n        ...DetailedBookingDetails\n      }\n    }\n  }\n}"];
export function graphql(source: "query bookingDetails($bookingReference: String!) {\n  bookings(reference: $bookingReference) {\n    edges {\n      node {\n        ...BookingWithProductionDetails\n        createdAt\n        updatedAt\n        creator {\n          id\n          firstName\n          lastName\n          email\n        }\n        adminDiscountPercentage\n        user {\n          id\n          firstName\n          lastName\n          email\n        }\n      }\n    }\n  }\n}"): (typeof documents)["query bookingDetails($bookingReference: String!) {\n  bookings(reference: $bookingReference) {\n    edges {\n      node {\n        ...BookingWithProductionDetails\n        createdAt\n        updatedAt\n        creator {\n          id\n          firstName\n          lastName\n          email\n        }\n        adminDiscountPercentage\n        user {\n          id\n          firstName\n          lastName\n          email\n        }\n      }\n    }\n  }\n}"];
export function graphql(source: "query adminPerformanceDetail($productionSlug: String!, $performanceId: ID!) {\n  production(slug: $productionSlug) {\n    id\n    slug\n    name\n    permissions\n    performances(id: $performanceId) {\n      edges {\n        node {\n          id\n          venue {\n            id\n            name\n            slug\n            internalCapacity\n          }\n          description\n          disabled\n          doorsOpen\n          start\n          end\n          durationMins\n          intervalDurationMins\n          soldOut\n          isOnline\n          isInperson\n          isBookable\n          capacity\n          capacityRemaining\n          ticketOptions {\n            ...PerformanceTicketOptionsFragment\n            capacity\n            numberTicketsSold\n          }\n          ticketsBreakdown {\n            totalCapacity\n            totalTicketsSold\n          }\n          salesBreakdown {\n            societyRevenue\n          }\n          discounts {\n            edges {\n              node {\n                id\n                percentage\n                performances {\n                  edges {\n                    node {\n                      id\n                    }\n                  }\n                }\n                seatGroup {\n                  id\n                  name\n                  description\n                }\n                requirements {\n                  id\n                  number\n                  concessionType {\n                    id\n                    name\n                    description\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}"): (typeof documents)["query adminPerformanceDetail($productionSlug: String!, $performanceId: ID!) {\n  production(slug: $productionSlug) {\n    id\n    slug\n    name\n    permissions\n    performances(id: $performanceId) {\n      edges {\n        node {\n          id\n          venue {\n            id\n            name\n            slug\n            internalCapacity\n          }\n          description\n          disabled\n          doorsOpen\n          start\n          end\n          durationMins\n          intervalDurationMins\n          soldOut\n          isOnline\n          isInperson\n          isBookable\n          capacity\n          capacityRemaining\n          ticketOptions {\n            ...PerformanceTicketOptionsFragment\n            capacity\n            numberTicketsSold\n          }\n          ticketsBreakdown {\n            totalCapacity\n            totalTicketsSold\n          }\n          salesBreakdown {\n            societyRevenue\n          }\n          discounts {\n            edges {\n              node {\n                id\n                percentage\n                performances {\n                  edges {\n                    node {\n                      id\n                    }\n                  }\n                }\n                seatGroup {\n                  id\n                  name\n                  description\n                }\n                requirements {\n                  id\n                  number\n                  concessionType {\n                    id\n                    name\n                    description\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}"];
export function graphql(source: "query adminPerformancesIndex($productionId: IdInputField, $productionSlug: String, $offset: Int, $disabled: Boolean, $take: Int = 10) {\n  production(id: $productionId, slug: $productionSlug) {\n    id\n    performances(\n      first: $take\n      offset: $offset\n      orderBy: \"start\"\n      disabled: $disabled\n    ) {\n      pageInfo {\n        hasNextPage\n      }\n      edges {\n        node {\n          id\n          venue {\n            id\n            name\n          }\n          minSeatPrice\n          durationMins\n          intervalDurationMins\n          doorsOpen\n          start\n          disabled\n          soldOut\n          isOnline\n          isBookable\n          isInperson\n          ticketsBreakdown {\n            totalCapacity\n            totalTicketsSold\n          }\n        }\n      }\n    }\n  }\n}"): (typeof documents)["query adminPerformancesIndex($productionId: IdInputField, $productionSlug: String, $offset: Int, $disabled: Boolean, $take: Int = 10) {\n  production(id: $productionId, slug: $productionSlug) {\n    id\n    performances(\n      first: $take\n      offset: $offset\n      orderBy: \"start\"\n      disabled: $disabled\n    ) {\n      pageInfo {\n        hasNextPage\n      }\n      edges {\n        node {\n          id\n          venue {\n            id\n            name\n          }\n          minSeatPrice\n          durationMins\n          intervalDurationMins\n          doorsOpen\n          start\n          disabled\n          soldOut\n          isOnline\n          isBookable\n          isInperson\n          ticketsBreakdown {\n            totalCapacity\n            totalTicketsSold\n          }\n        }\n      }\n    }\n  }\n}"];
export function graphql(source: "query adminProductionCompleteBookings($productionSlug: String!, $performanceId: ID, $search: String, $offset: Int, $orderBy: String, $status: String) {\n  production(slug: $productionSlug) {\n    id\n    performances(id: $performanceId) {\n      edges {\n        node {\n          id\n          bookings(\n            search: $search\n            first: 10\n            offset: $offset\n            orderBy: $orderBy\n            status: $status\n            expired: false\n          ) {\n            pageInfo {\n              startCursor\n              endCursor\n              hasNextPage\n              hasPreviousPage\n            }\n            edges {\n              node {\n                ...BasicBookingDetails\n                createdAt\n                creator {\n                  id\n                  firstName\n                  lastName\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}"): (typeof documents)["query adminProductionCompleteBookings($productionSlug: String!, $performanceId: ID, $search: String, $offset: Int, $orderBy: String, $status: String) {\n  production(slug: $productionSlug) {\n    id\n    performances(id: $performanceId) {\n      edges {\n        node {\n          id\n          bookings(\n            search: $search\n            first: 10\n            offset: $offset\n            orderBy: $orderBy\n            status: $status\n            expired: false\n          ) {\n            pageInfo {\n              startCursor\n              endCursor\n              hasNextPage\n              hasPreviousPage\n            }\n            edges {\n              node {\n                ...BasicBookingDetails\n                createdAt\n                creator {\n                  id\n                  firstName\n                  lastName\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}"];
export function graphql(source: "query adminProductionEdit($slug: String!) {\n  production(slug: $slug) {\n    id\n    name\n    subtitle\n    contactEmail\n    society {\n      id\n      name\n      logo {\n        id\n        url\n      }\n    }\n    slug\n    description\n    contentWarnings {\n      information\n      warning {\n        id\n        shortDescription\n        longDescription\n      }\n    }\n    coverImage {\n      id\n      url\n    }\n    featuredImage {\n      id\n      url\n    }\n    posterImage {\n      id\n      url\n    }\n    ageRating\n    facebookEvent\n    performances(orderBy: \"start\") {\n      edges {\n        node {\n          id\n          venue {\n            id\n            name\n          }\n          doorsOpen\n          start\n          soldOut\n          isOnline\n          isInperson\n        }\n      }\n    }\n    isBookable\n  }\n}"): (typeof documents)["query adminProductionEdit($slug: String!) {\n  production(slug: $slug) {\n    id\n    name\n    subtitle\n    contactEmail\n    society {\n      id\n      name\n      logo {\n        id\n        url\n      }\n    }\n    slug\n    description\n    contentWarnings {\n      information\n      warning {\n        id\n        shortDescription\n        longDescription\n      }\n    }\n    coverImage {\n      id\n      url\n    }\n    featuredImage {\n      id\n      url\n    }\n    posterImage {\n      id\n      url\n    }\n    ageRating\n    facebookEvent\n    performances(orderBy: \"start\") {\n      edges {\n        node {\n          id\n          venue {\n            id\n            name\n          }\n          doorsOpen\n          start\n          soldOut\n          isOnline\n          isInperson\n        }\n      }\n    }\n    isBookable\n  }\n}"];
export function graphql(source: "query adminProductionPermissions($slug: String!) {\n  production(slug: $slug) {\n    id\n    assignablePermissions {\n      name\n      description\n      userCanAssign\n    }\n    assignedUsers {\n      user {\n        id\n        firstName\n        lastName\n        email\n      }\n      assignedPermissions\n    }\n  }\n}"): (typeof documents)["query adminProductionPermissions($slug: String!) {\n  production(slug: $slug) {\n    id\n    assignablePermissions {\n      name\n      description\n      userCanAssign\n    }\n    assignedUsers {\n      user {\n        id\n        firstName\n        lastName\n        email\n      }\n      assignedPermissions\n    }\n  }\n}"];
export function graphql(source: "query adminProductionShow($slug: String!) {\n  production(slug: $slug) {\n    id\n    name\n    subtitle\n    society {\n      id\n      name\n    }\n    status\n    slug\n    start\n    end\n    isBookable\n    salesBreakdown {\n      societyRevenue\n    }\n    totalCapacity\n    totalTicketsSold\n    permissions\n  }\n}"): (typeof documents)["query adminProductionShow($slug: String!) {\n  production(slug: $slug) {\n    id\n    name\n    subtitle\n    society {\n      id\n      name\n    }\n    status\n    slug\n    start\n    end\n    isBookable\n    salesBreakdown {\n      societyRevenue\n    }\n    totalCapacity\n    totalTicketsSold\n    permissions\n  }\n}"];
export function graphql(source: "query adminProductions($endGte: DateTime, $offset: Int, $status: String, $startLte: DateTime, $search: String) {\n  productions(\n    first: 10\n    orderBy: \"-start\"\n    userHasPermission: \"view_production\"\n    offset: $offset\n    start_Lte: $startLte\n    end_Gte: $endGte\n    status: $status\n    search: $search\n  ) {\n    pageInfo {\n      hasNextPage\n    }\n    edges {\n      node {\n        id\n        name\n        slug\n        featuredImage {\n          id\n          url\n        }\n        status\n        society {\n          id\n          name\n        }\n        start\n        end\n        isBookable\n      }\n    }\n  }\n}"): (typeof documents)["query adminProductions($endGte: DateTime, $offset: Int, $status: String, $startLte: DateTime, $search: String) {\n  productions(\n    first: 10\n    orderBy: \"-start\"\n    userHasPermission: \"view_production\"\n    offset: $offset\n    start_Lte: $startLte\n    end_Gte: $endGte\n    status: $status\n    search: $search\n  ) {\n    pageInfo {\n      hasNextPage\n    }\n    edges {\n      node {\n        id\n        name\n        slug\n        featuredImage {\n          id\n          url\n        }\n        status\n        society {\n          id\n          name\n        }\n        start\n        end\n        isBookable\n      }\n    }\n  }\n}"];
export function graphql(source: "query adminSocietiesIndex {\n  societies(userHasPermission: \"add_production\") {\n    edges {\n      node {\n        id\n        name\n        slug\n        logo {\n          id\n          url\n        }\n        permissions\n      }\n    }\n  }\n}"): (typeof documents)["query adminSocietiesIndex {\n  societies(userHasPermission: \"add_production\") {\n    edges {\n      node {\n        id\n        name\n        slug\n        logo {\n          id\n          url\n        }\n        permissions\n      }\n    }\n  }\n}"];
export function graphql(source: "query adminVenueDetailed($slug: String!) {\n  venue(slug: $slug) {\n    id\n    name\n    slug\n    description\n    address {\n      ...AddressFields\n    }\n    image {\n      url\n    }\n    internalCapacity\n    seatGroups {\n      edges {\n        node {\n          id\n          name\n          description\n          capacity\n        }\n      }\n    }\n  }\n}"): (typeof documents)["query adminVenueDetailed($slug: String!) {\n  venue(slug: $slug) {\n    id\n    name\n    slug\n    description\n    address {\n      ...AddressFields\n    }\n    image {\n      url\n    }\n    internalCapacity\n    seatGroups {\n      edges {\n        node {\n          id\n          name\n          description\n          capacity\n        }\n      }\n    }\n  }\n}"];
export function graphql(source: "query boxOfficePaymentDevices {\n  paymentDevices(paymentProvider: SQUARE_POS, paired: true) {\n    id\n    name\n    code\n    deviceId\n    locationId\n  }\n}"): (typeof documents)["query boxOfficePaymentDevices {\n  paymentDevices(paymentProvider: SQUARE_POS, paired: true) {\n    id\n    name\n    code\n    deviceId\n    locationId\n  }\n}"];
export function graphql(source: "query boxOfficePerformance($id: ID!) {\n  performance(id: $id) {\n    id\n    capacityRemaining\n    venue {\n      id\n      name\n      slug\n    }\n    disabled\n    doorsOpen\n    start\n    end\n    durationMins\n    soldOut\n    isInperson\n    isOnline\n    production {\n      ...ProductionBasicInfo\n    }\n  }\n}"): (typeof documents)["query boxOfficePerformance($id: ID!) {\n  performance(id: $id) {\n    id\n    capacityRemaining\n    venue {\n      id\n      name\n      slug\n    }\n    disabled\n    doorsOpen\n    start\n    end\n    durationMins\n    soldOut\n    isInperson\n    isOnline\n    production {\n      ...ProductionBasicInfo\n    }\n  }\n}"];
export function graphql(source: "query boxOfficePerformanceBooking($performanceId: ID!, $bookingId: ID!) {\n  performance(id: $performanceId) {\n    id\n    bookings(id: $bookingId) {\n      edges {\n        node {\n          ...DetailedBookingDetails\n        }\n      }\n    }\n  }\n}"): (typeof documents)["query boxOfficePerformanceBooking($performanceId: ID!, $bookingId: ID!) {\n  performance(id: $performanceId) {\n    id\n    bookings(id: $bookingId) {\n      edges {\n        node {\n          ...DetailedBookingDetails\n        }\n      }\n    }\n  }\n}"];
export function graphql(source: "query boxOfficePerformanceBookings($id: ID!, $search: String, $offset: Int, $orderBy: String, $discount: Float, $checkedIn: Boolean) {\n  performance(id: $id) {\n    id\n    bookings(\n      search: $search\n      first: 10\n      offset: $offset\n      orderBy: $orderBy\n      status: \"PAID\"\n      expired: false\n      adminDiscountPercentage: $discount\n      checkedIn: $checkedIn\n    ) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          ...DetailedBookingDetails\n        }\n      }\n    }\n  }\n}"): (typeof documents)["query boxOfficePerformanceBookings($id: ID!, $search: String, $offset: Int, $orderBy: String, $discount: Float, $checkedIn: Boolean) {\n  performance(id: $id) {\n    id\n    bookings(\n      search: $search\n      first: 10\n      offset: $offset\n      orderBy: $orderBy\n      status: \"PAID\"\n      expired: false\n      adminDiscountPercentage: $discount\n      checkedIn: $checkedIn\n    ) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          ...DetailedBookingDetails\n        }\n      }\n    }\n  }\n}"];
export function graphql(source: "query boxOfficePerformanceTicketBreakdown($id: ID!) {\n  performance(id: $id) {\n    id\n    ticketsBreakdown {\n      totalCapacity\n      totalTicketsSold\n      totalTicketsCheckedIn\n      totalTicketsToCheckIn\n      totalTicketsAvailable\n    }\n  }\n}"): (typeof documents)["query boxOfficePerformanceTicketBreakdown($id: ID!) {\n  performance(id: $id) {\n    id\n    ticketsBreakdown {\n      totalCapacity\n      totalTicketsSold\n      totalTicketsCheckedIn\n      totalTicketsToCheckIn\n      totalTicketsAvailable\n    }\n  }\n}"];
export function graphql(source: "query boxOfficePerformances($date: Date) {\n  performances(\n    first: 9\n    orderBy: \"start\"\n    runOn: $date\n    hasBoxofficePermissions: true\n  ) {\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n    edges {\n      node {\n        id\n        start\n        doorsOpen\n        production {\n          ...ProductionBasicInfo\n        }\n        venue {\n          id\n          name\n        }\n      }\n    }\n  }\n}"): (typeof documents)["query boxOfficePerformances($date: Date) {\n  performances(\n    first: 9\n    orderBy: \"start\"\n    runOn: $date\n    hasBoxofficePermissions: true\n  ) {\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n    edges {\n      node {\n        id\n        start\n        doorsOpen\n        production {\n          ...ProductionBasicInfo\n        }\n        venue {\n          id\n          name\n        }\n      }\n    }\n  }\n}"];
export function graphql(source: "query performanceById($id: ID!) {\n  performance(id: $id) {\n    id\n    doorsOpen\n    start\n    end\n    production {\n      ...ProductionBasicInfo\n    }\n  }\n}"): (typeof documents)["query performanceById($id: ID!) {\n  performance(id: $id) {\n    id\n    doorsOpen\n    start\n    end\n    production {\n      ...ProductionBasicInfo\n    }\n  }\n}"];
export function graphql(source: "query allUpcomingProductions($now: DateTime!) {\n  productions(orderBy: \"start\", end_Gte: $now, status: \"PUBLISHED\") {\n    edges {\n      node {\n        id\n        slug\n        name\n        start\n        end\n        isBookable\n        featuredImage {\n          id\n          url\n        }\n        venues {\n          id\n          name\n        }\n      }\n    }\n  }\n}"): (typeof documents)["query allUpcomingProductions($now: DateTime!) {\n  productions(orderBy: \"start\", end_Gte: $now, status: \"PUBLISHED\") {\n    edges {\n      node {\n        id\n        slug\n        name\n        start\n        end\n        isBookable\n        featuredImage {\n          id\n          url\n        }\n        venues {\n          id\n          name\n        }\n      }\n    }\n  }\n}"];
export function graphql(source: "query venueUpcomingProductions($slug: String!, $now: DateTime!, $nowDate: Date) {\n  venue(slug: $slug) {\n    id\n    name\n    productions(orderBy: \"start\", end_Gte: $now, status: \"PUBLISHED\") {\n      ...ProductionsDetailsFragment\n    }\n  }\n}"): (typeof documents)["query venueUpcomingProductions($slug: String!, $now: DateTime!, $nowDate: Date) {\n  venue(slug: $slug) {\n    id\n    name\n    productions(orderBy: \"start\", end_Gte: $now, status: \"PUBLISHED\") {\n      ...ProductionsDetailsFragment\n    }\n  }\n}"];
export function graphql(source: "query completeBookings($afterCursor: String, $active: Boolean, $orderBy: String = \"start\", $offset: Int, $max: Int = 10) {\n  me {\n    bookings(\n      statusIn: [\"PAID\", \"CANCELLED\"]\n      first: $max\n      orderBy: $orderBy\n      active: $active\n      offset: $offset\n      after: $afterCursor\n    ) {\n      pageInfo {\n        hasNextPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          ...BasicBookingDetails\n        }\n      }\n    }\n  }\n}"): (typeof documents)["query completeBookings($afterCursor: String, $active: Boolean, $orderBy: String = \"start\", $offset: Int, $max: Int = 10) {\n  me {\n    bookings(\n      statusIn: [\"PAID\", \"CANCELLED\"]\n      first: $max\n      orderBy: $orderBy\n      active: $active\n      offset: $offset\n      after: $afterCursor\n    ) {\n      pageInfo {\n        hasNextPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          ...BasicBookingDetails\n        }\n      }\n    }\n  }\n}"];
export function graphql(source: "query myAccountDetails {\n  me {\n    firstName\n    lastName\n    email\n  }\n}"): (typeof documents)["query myAccountDetails {\n  me {\n    firstName\n    lastName\n    email\n  }\n}"];

export function graphql(source: string): unknown;
export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;